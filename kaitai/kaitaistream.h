#ifndef KAITAI_STREAM_H
#define KAITAI_STREAM_H

#include <istream>
#include <fstream>
#include <stdint.h>
#include <sys/types.h>

namespace kaitai {

class kstream {
public:
    kstream(std::istream* io);
    kstream(std::string& data);

    void close();

    // ========================================================================
    // Stream positioning
    // ========================================================================

    bool is_eof() const;
    void seek(std::ifstream::pos_type pos);
    std::ifstream::pos_type pos();

    // ========================================================================
    // Integer numbers
    // ========================================================================

    // ------------------------------------------------------------------------
    // Signed
    // ------------------------------------------------------------------------

    int8_t read_s1();

    // ........................................................................
    // Big-endian
    // ........................................................................

    int16_t read_s2be();
    int32_t read_s4be();
    int64_t read_s8be();

    // ........................................................................
    // Little-endian
    // ........................................................................

    int16_t read_s2le();
    int32_t read_s4le();
    int64_t read_s8le();

    // ------------------------------------------------------------------------
    // Unsigned
    // ------------------------------------------------------------------------

    uint8_t read_u1();

    // ........................................................................
    // Big-endian
    // ........................................................................

    uint16_t read_u2be();
    uint32_t read_u4be();
    uint64_t read_u8be();

    // ........................................................................
    // Little-endian
    // ........................................................................

    uint16_t read_u2le();
    uint32_t read_u4le();
    uint64_t read_u8le();

    // ========================================================================
    // Floating point numbers
    // ========================================================================

    // ........................................................................
    // Big-endian
    // ........................................................................

    float read_f4be();
    double read_f8be();

    // ........................................................................
    // Little-endian
    // ........................................................................

    float read_f4le();
    double read_f8le();

    // ========================================================================
    // Strings
    // ========================================================================

    std::string read_str_byte_limit(ssize_t len);
    std::string read_strz(char term, bool include, bool consume, bool eos_error);

    // ========================================================================
    // Byte arrays
    // ========================================================================

    std::string read_bytes(ssize_t len);
    std::string read_bytes_full();
    std::string ensure_fixed_contents(ssize_t len, const char* expected);

    // ========================================================================
    // Byte array processing
    // ========================================================================

    static std::string process_xor_one(std::string data, uint8_t key);
    static std::string process_xor_many(std::string data, std::string key);
    static std::string process_rotate_left(std::string data, int amount);

private:
    std::istream* m_io;
};

}

#endif
